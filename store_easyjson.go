// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package crawler

import (
	json "encoding/json"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	url "net/url"
	time "time"
)

var _ = json.RawMessage{} // suppress unused package warning

func easyjson_decode_github_com_fanyang01_crawler_URL(in *jlexer.Lexer, out *URL) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Loc":
			easyjson_decode_net_url_URL(in, &out.Loc)
		case "Depth":
			out.Depth = int(in.Int())
		case "Status":
			out.Status = int(in.Int())
		case "Freq":
			out.Freq = time.Duration(in.Int64())
		case "LastMod":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastMod).UnmarshalJSON(data))
			}
		case "LastTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastTime).UnmarshalJSON(data))
			}
		case "VisitCount":
			out.VisitCount = int(in.Int())
		case "ErrCount":
			out.ErrCount = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_encode_github_com_fanyang01_crawler_URL(out *jwriter.Writer, in *URL) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Loc\":")
	easyjson_encode_net_url_URL(out, &in.Loc)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Depth\":")
	out.Int(int(in.Depth))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Status\":")
	out.Int(int(in.Status))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Freq\":")
	out.Int64(int64(in.Freq))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"LastMod\":")
	out.Raw((in.LastMod).MarshalJSON())
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"LastTime\":")
	out.Raw((in.LastTime).MarshalJSON())
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"VisitCount\":")
	out.Int(int(in.VisitCount))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ErrCount\":")
	out.Int(int(in.ErrCount))
	out.RawByte('}')
}
func (v *URL) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_encode_github_com_fanyang01_crawler_URL(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v *URL) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_encode_github_com_fanyang01_crawler_URL(w, v)
}
func (v *URL) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_decode_github_com_fanyang01_crawler_URL(&r, v)
	return r.Error()
}
func (v *URL) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_decode_github_com_fanyang01_crawler_URL(l, v)
}
func easyjson_decode_net_url_URL(in *jlexer.Lexer, out *url.URL) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Scheme":
			out.Scheme = string(in.String())
		case "Opaque":
			out.Opaque = string(in.String())
		case "User":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				out.User = new(url.Userinfo)
				easyjson_decode_net_url_Userinfo(in, &*out.User)
			}
		case "Host":
			out.Host = string(in.String())
		case "Path":
			out.Path = string(in.String())
		case "RawPath":
			out.RawPath = string(in.String())
		case "RawQuery":
			out.RawQuery = string(in.String())
		case "Fragment":
			out.Fragment = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_encode_net_url_URL(out *jwriter.Writer, in *url.URL) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Scheme\":")
	out.String(string(in.Scheme))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Opaque\":")
	out.String(string(in.Opaque))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"User\":")
	if in.User == nil {
		out.RawString("null")
	} else {
		easyjson_encode_net_url_Userinfo(out, &*in.User)
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Host\":")
	out.String(string(in.Host))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Path\":")
	out.String(string(in.Path))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"RawPath\":")
	out.String(string(in.RawPath))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"RawQuery\":")
	out.String(string(in.RawQuery))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Fragment\":")
	out.String(string(in.Fragment))
	out.RawByte('}')
}
func easyjson_decode_net_url_Userinfo(in *jlexer.Lexer, out *url.Userinfo) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_encode_net_url_Userinfo(out *jwriter.Writer, in *url.Userinfo) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}
